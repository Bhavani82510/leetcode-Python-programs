class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        char_set = set()  # To store characters in the current window
        left = 0  # Left pointer for the sliding window
        max_length = 0  # To keep track of the longest substring length

        for right in range(len(s)):
            # If the character is already in the window, move the left pointer
            while s[right] in char_set:
                char_set.remove(s[left])  # Remove character at the left pointer
                left += 1  # Shrink the window from the left side

            # Add the current character to the set
            char_set.add(s[right])

            # Update the max length of the substring
            max_length = max(max_length, right - left + 1)

        return max_length
