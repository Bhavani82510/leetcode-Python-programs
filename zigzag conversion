class Solution(object):
    def convert(self, s, numRows):
        """
        :type s: str
        :type numRows: int
        :rtype: str
        """
        # Edge case: If there's 1 row or the string is shorter than 2 characters,
        # the pattern is just the original string.
        if numRows == 1 or len(s) <= numRows:
            return s
        
        # Initialize a list of 'numRows' empty strings (or string builders in a real-world scenario).
        # Each element will store the characters belonging to that row.
        rows = [''] * numRows
        
        # 'current_row' tracks which row we are currently adding a character to.
        current_row = 0
        
        # 'direction' is a flag: 1 means going down, -1 means going up (diagonally).
        direction = 1
        
        for char in s:
            # Append the current character to the string of the current row.
            rows[current_row] += char
            
            # Update the direction when we hit the top or bottom row.
            if current_row == 0:
                # Hit the top, must go DOWN (from row 0 to 1, 2, ...).
                direction = 1
            elif current_row == numRows - 1:
                # Hit the bottom, must go UP (from row numRows-1 to numRows-2, ...).
                direction = -1
            
            # Move to the next row based on the current direction.
            current_row += direction
            
        # Join all the row strings together in order to form the final result.
        return "".join(rows)
